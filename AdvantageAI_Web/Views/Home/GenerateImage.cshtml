@model AdvantageAIWeb.ViewModels.ImagePromptViewModel

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "Generate Image - AdvantageAI";
}

<div class="container-fluid mt-4">
    <div class="row">
        <!-- Main Content Column -->
        <div class="col-md-8">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h2>Generate Image with DALL-E</h2>
                    <div class="btn-group">
                        <button class="btn btn-outline-secondary" id="saveAsDraft">
                            <i class="bi bi-save me-2"></i>Save Draft
                        </button>
                        <button class="btn btn-outline-secondary" data-bs-toggle="modal" data-bs-target="#historyModal">
                            <i class="bi bi-clock-history me-2"></i>History
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    @using (Html.BeginForm("GenerateImage", "Home", FormMethod.Post, new { id = "generateImageForm" }))
                    {
                        @Html.AntiForgeryToken()

                        <!-- Prompt Input with Smart Suggestions -->
                        <div class="mb-3">
                            <label class="form-label d-flex justify-content-between">
                                Image Description
                                <small class="text-muted" id="promptCharCount">0/4000</small>
                            </label>
                            @Html.TextAreaFor(m => m.Prompt, new
                            {
                                @class = "form-control",
                                rows = "3",
                                placeholder = "Describe the image you want to generate...",
                                maxlength = "4000",
                                id = "imagePrompt"
                            })
                            @Html.ValidationMessageFor(m => m.Prompt, "", new { @class = "text-danger" })
                            <div id="smartSuggestions" class="mt-2"></div>
                        </div>

                        <!-- Image Parameters -->
                        <div class="row mb-3">
                            <!-- Basic Parameters -->
                            <div class="col-md-4">
                                <label class="form-label">Dimensions</label>
                                <select class="form-select" name="Size" id="imageSize">
                                    <optgroup label="Standard">
                                        <option value="1024x1024">1024x1024 (Square)</option>
                                        <option value="1024x1792">1024x1792 (Portrait)</option>
                                        <option value="1792x1024">1792x1024 (Landscape)</option>
                                    </optgroup>
                                    <optgroup label="Custom Aspect Ratios">
                                        <option value="16:9">16:9 Widescreen</option>
                                        <option value="4:3">4:3 Standard</option>
                                        <option value="3:2">3:2 Photo</option>
                                    </optgroup>
                                </select>
                            </div>

                            <div class="col-md-4">
                                <label class="form-label">Style</label>
                                <select class="form-select" name="ImageStyle" id="imageStyle">
                                    <optgroup label="General">
                                        <option value="vivid">Vivid</option>
                                        <option value="natural">Natural</option>
                                    </optgroup>
                                    <optgroup label="Artistic">
                                        <option value="minimalist">Minimalist</option>
                                        <option value="vintage">Vintage</option>
                                        <option value="popart">Pop Art</option>
                                        <option value="abstract">Abstract</option>
                                    </optgroup>
                                </select>
                            </div>

                            <div class="col-md-4">
                                <label class="form-label">Quality</label>
                                <select class="form-select" name="ImageQuality" id="imageQuality">
                                    <option value="standard">Standard</option>
                                    <option value="hd">HD</option>
                                    <option value="premium">Premium</option>
                                </select>
                            </div>
                        </div>

                        <!-- Advanced Parameters -->
                        <div class="row mb-3">
                            <div class="col-md-4">
                                <label class="form-label">Color Scheme</label>
                                <select class="form-select" name="ColorScheme" id="colorScheme">
                                    <option value="default">Default</option>
                                    <option value="bw">Black & White</option>
                                    <option value="sepia">Sepia</option>
                                    <option value="vibrant">Vibrant</option>
                                    <option value="muted">Muted</option>
                                </select>
                            </div>

                            <div class="col-md-4">
                                <label class="form-label">Background</label>
                                <select class="form-select" name="Background" id="background">
                                    <option value="auto">Auto-generated</option>
                                    <option value="nature">Nature</option>
                                    <option value="urban">Urban</option>
                                    <option value="abstract">Abstract</option>
                                    <option value="gradient">Gradient</option>
                                    <option value="transparent">Transparent</option>
                                </select>
                            </div>

                            <div class="col-md-4">
                                <label class="form-label">Lighting</label>
                                <select class="form-select" name="Lighting" id="lighting">
                                    <option value="auto">Auto</option>
                                    <option value="natural">Natural</option>
                                    <option value="studio">Studio</option>
                                    <option value="dramatic">Dramatic</option>
                                    <option value="soft">Soft</option>
                                </select>
                            </div>
                        </div>

                        <!-- Generation Controls -->
                        <div class="mb-3">
                            <div class="d-flex justify-content-between align-items-center">
                                <div class="btn-group">
                                    <button type="submit" class="btn btn-primary" id="generateBtn">
                                        <i class="bi bi-image me-2"></i>
                                        <span class="button-text">Generate Image</span>
                                        <span class="spinner-border spinner-border-sm ms-2 d-none" role="status"></span>
                                    </button>
                                    <button type="button" class="btn btn-outline-secondary" id="clearBtn" onclick="AdvantageAI.ImageGen.clearForm()">
                                        <i class="bi bi-trash me-2"></i>Clear
                                    </button>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="generateVariations">
                                    <label class="form-check-label" for="generateVariations">
                                        Generate variations
                                    </label>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>

            <!-- Real-time Preview and Progress -->
            <div id="previewContainer" class="mt-4 d-none">
                <div class="card">
                    <div class="card-header">
                        <h3 class="mb-0">Preview</h3>
                    </div>
                    <div class="card-body">
                        <div class="progress mb-3">
                            <div id="generationProgress" class="progress-bar progress-bar-striped progress-bar-animated"
                                 role="progressbar" style="width: 0%"></div>
                        </div>
                        <div class="preview-image-container text-center">
                            <img id="previewImage" class="img-fluid rounded shadow-sm" alt="Preview will appear here" />
                        </div>
                    </div>
                </div>
            </div>

            <!-- Generated Image Result -->
            <div id="resultContainer" class="mt-4 d-none">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h3 class="mb-0">Generated Image</h3>
                        <div class="btn-group">
                            <button class="btn btn-outline-primary" id="downloadBtn" onclick="AdvantageAI.ImageGen.downloadImage()">
                                <i class="bi bi-download me-2"></i>Download
                            </button>
                            <button class="btn btn-outline-secondary" id="copyUrlBtn" onclick="AdvantageAI.ImageGen.copyImageUrl()">
                                <i class="bi bi-clipboard me-2"></i>Copy URL
                            </button>
                            <button class="btn btn-outline-secondary" id="shareBtn" onclick="AdvantageAI.ImageGen.shareImage()">
                                <i class="bi bi-share me-2"></i>Share
                            </button>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-8">
                                <img id="generatedImage" class="img-fluid rounded shadow-sm" alt="Generated image" />
                                <div class="mt-2">
                                    <small class="text-muted" id="imageInfo"></small>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <!-- Quick Edit Tools -->
                                <div class="quick-edit-tools">
                                    <h4>Quick Edit</h4>
                                    <div class="mb-3">
                                        <label class="form-label">Brightness</label>
                                        <input type="range" class="form-range" id="brightness" min="0" max="200" value="100">
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Contrast</label>
                                        <input type="range" class="form-range" id="contrast" min="0" max="200" value="100">
                                    </div>
                                    <div class="mb-3">
                                        <label class="form-label">Saturation</label>
                                        <input type="range" class="form-range" id="saturation" min="0" max="200" value="100">
                                    </div>
                                    <div class="btn-group w-100">
                                        <button class="btn btn-sm btn-outline-secondary" onclick="AdvantageAI.ImageGen.rotateImage(-90)">
                                            <i class="bi bi-arrow-counterclockwise"></i>
                                        </button>
                                        <button class="btn btn-sm btn-outline-secondary" onclick="AdvantageAI.ImageGen.rotateImage(90)">
                                            <i class="bi bi-arrow-clockwise"></i>
                                        </button>
                                        <button class="btn btn-sm btn-outline-secondary" onclick="AdvantageAI.ImageGen.flipImage('horizontal')">
                                            <i class="bi bi-arrow-left-right"></i>
                                        </button>
                                        <button class="btn btn-sm btn-outline-secondary" onclick="AdvantageAI.ImageGen.flipImage('vertical')">
                                            <i class="bi bi-arrow-down-up"></i>
                                        </button>
                                    </div>
                                </div>
                                <!-- Download Options -->
                                <div class="mt-3">
                                    <h4>Download Options</h4>
                                    <select class="form-select mb-2" id="downloadFormat">
                                        <option value="png">PNG</option>
                                        <option value="jpg">JPG</option>
                                        <option value="webp">WebP</option>
                                    </select>
                                    <select class="form-select mb-2" id="downloadQuality">
                                        <option value="high">High Quality</option>
                                        <option value="medium">Medium Quality</option>
                                        <option value="low">Low Quality</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Image Variations -->
                <div id="variationsContainer" class="mt-4 d-none">
                    <div class="card">
                        <div class="card-header">
                            <h3 class="mb-0">Variations</h3>
                        </div>
                        <div class="card-body">
                            <div class="row" id="variationsGrid"></div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Error Alert -->
            <div id="errorAlert" class="alert alert-danger mt-3 d-none"></div>
        </div>

        <!-- Sidebar -->
        <div class="col-md-4">
            <!-- History Panel -->
            <div class="card mb-3">
                <div class="card-header">
                    <h3 class="mb-0">Recent Generations</h3>
                </div>
                <div class="card-body">
                    <div id="generationHistory"></div>
                </div>
            </div>

            <!-- Saved Drafts -->
            <div class="card">
                <div class="card-header">
                    <h3 class="mb-0">Saved Drafts</h3>
                </div>
                <div class="card-body">
                    <div id="savedDrafts"></div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modals -->
<div class="modal fade" id="shareModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Share Image</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label class="form-label">Shareable Link</label>
                    <div class="input-group">
                        <input type="text" class="form-control" id="shareLink" readonly>
                        <button class="btn btn-outline-secondary" onclick="AdvantageAI.ImageGen.copyShareLink()">
                            <i class="bi bi-clipboard"></i>
                        </button>
                    </div>
                </div>
                <div class="mb-3">
                    <label class="form-label">Social Media</label>
                    <div class="btn-group w-100">
                        <button class="btn btn-outline-primary" onclick="AdvantageAI.ImageGen.shareToSocial('twitter')">
                            <i class="bi bi-twitter"></i> Twitter

                            @section Scripts {
                                <script src="https://cdnjs.cloudflare.com/ajax/libs/fabric.js/5.3.1/fabric.min.js"></script>
                                <script>
        // AdvantageAI namespace
        var AdvantageAI = AdvantageAI || {};

        AdvantageAI.ImageGen = {
            currentImageUrl: '',
            canvas: null,
            history: [],
            drafts: [],

            // Initialize the module
            init: function() {
                this.setupEventListeners();
                this.initCanvas();
                this.loadHistory();
                this.loadDrafts();
                this.setupImageEditing();
            },

            // Get CSRF token
            getCsrfToken: function() {
                return $('input[name="__RequestVerificationToken"]').val();
            },

            // Setup all event listeners
            setupEventListeners: function() {
                // Character counter for prompt
                $('#imagePrompt').on('input', function() {
                    const count = $(this).val().length;
                    $('#promptCharCount').text(`${count}/4000`);
                });

                // Real-time preview updates
                $('.form-select').on('change', this.updatePreview.bind(this));

                // Quick edit tool listeners
                $('#brightness, #contrast, #saturation').on('input', this.applyImageAdjustments.bind(this));

                // Save draft auto-save
                $('#imagePrompt').on('input', _.debounce(this.autosaveDraft.bind(this), 1000));
            },

            // Initialize canvas for image editing
            initCanvas: function() {
                this.canvas = new fabric.Canvas('editCanvas', {
                    width: 800,
                    height: 600
                });
            },

            // Generate image
            generateImage: async function(formData) {
                this.showProgress(true);
                const requestData = {
                    prompt: $('#imagePrompt').val(),
                    size: $('#imageSize').val(),
                    style: $('#imageStyle').val(),
                    quality: $('#imageQuality').val(),
                    colorScheme: $('#colorScheme').val(),
                    background: $('#background').val(),
                    lighting: $('#lighting').val(),
                    generateVariations: $('#generateVariations').is(':checked'),
                    __RequestVerificationToken: this.getCsrfToken()
                };

                try {
                    const response = await $.ajax({
                        url: '@Url.Action("GenerateImage", "Home")',
                        type: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify(requestData)
                    });

                    if (response.success) {
                        this.handleSuccessfulGeneration(response);
                    } else {
                        this.showError(response.error || 'Failed to generate image');
                    }
                } catch (error) {
                    this.showError('An error occurred during image generation');
                    console.error('Generation error:', error);
                } finally {
                    this.showProgress(false);
                }
            },

            // Handle successful generation
            handleSuccessfulGeneration: function(response) {
                this.currentImageUrl = response.imageUrl;

                // Update main image
                $('#generatedImage').attr('src', response.imageUrl);
                $('#imageInfo').text(response.imageInfo);
                $('#resultContainer').removeClass('d-none');

                // Handle variations if present
                if (response.variations && response.variations.length > 0) {
                    this.displayVariations(response.variations);
                }

                // Add to history
                this.addToHistory({
                    url: response.imageUrl,
                    prompt: $('#imagePrompt').val(),
                    timestamp: new Date().toISOString()
                });

                // Scroll to result
                $('#resultContainer')[0].scrollIntoView({ behavior: 'smooth', block: 'nearest' });
            },

            // Display variations
            displayVariations: function(variations) {
                const $grid = $('#variationsGrid').empty();
                variations.forEach(variation => {
                    const $col = $('<div class="col-md-3 mb-3">');
                    const $img = $('<img>')
                        .addClass('img-fluid rounded cursor-pointer')
                        .attr('src', variation.url)
                        .on('click', () => this.selectVariation(variation));
                    $col.append($img);
                    $grid.append($col);
                });
                $('#variationsContainer').removeClass('d-none');
            },

            // Image editing functions
            applyImageAdjustments: function() {
                const brightness = $('#brightness').val();
                const contrast = $('#contrast').val();
                const saturation = $('#saturation').val();

                const image = this.canvas.getActiveObject();
                if (!image) return;

                image.filters = [
                    new fabric.Image.filters.Brightness({ brightness: (brightness - 100) / 100 }),
                    new fabric.Image.filters.Contrast({ contrast: (contrast - 100) / 100 }),
                    new fabric.Image.filters.Saturation({ saturation: (saturation - 100) / 100 })
                ];
                image.applyFilters();
                this.canvas.renderAll();
            },

            // Rotate image
            rotateImage: function(degrees) {
                const image = this.canvas.getActiveObject();
                if (!image) return;

                image.rotate((image.angle || 0) + degrees);
                this.canvas.renderAll();
            },

            // Flip image
            flipImage: function(direction) {
                const image = this.canvas.getActiveObject();
                if (!image) return;

                if (direction === 'horizontal') {
                    image.flipX = !image.flipX;
                } else {
                    image.flipY = !image.flipY;
                }
                this.canvas.renderAll();
            },

            // Download functions
            downloadImage: async function() {
                if (!this.currentImageUrl) return;

                const format = $('#downloadFormat').val();
                const quality = $('#downloadQuality').val();

                try {
                    // If image has been edited, download from canvas
                    if (this.hasEdits) {
                        const dataUrl = this.canvas.toDataURL({
                            format: format,
                            quality: quality === 'high' ? 1 : quality === 'medium' ? 0.8 : 0.6
                        });
                        this.downloadDataUrl(dataUrl, `generated-image-${Date.now()}.${format}`);
                    } else {
                        // Download original image
                        const response = await fetch(this.currentImageUrl);
                        const blob = await response.blob();
                        const url = window.URL.createObjectURL(blob);
                        const a = document.createElement('a');
                        a.href = url;
                        a.download = `generated-image-${Date.now()}.${format}`;
                        document.body.appendChild(a);
                        a.click();
                        window.URL.revokeObjectURL(url);
                        document.body.removeChild(a);
                    }
                } catch (error) {
                    this.showError('Failed to download image');
                    console.error('Download error:', error);
                }
            },

            // Share functions
            shareImage: function() {
                if (!this.currentImageUrl) return;

                const shareUrl = `${window.location.origin}/share?image=${encodeURIComponent(this.currentImageUrl)}`;
                $('#shareLink').val(shareUrl);
                $('#shareModal').modal('show');
            },

            // Copy share link
            copyShareLink: function() {
                const link = $('#shareLink').val();
                navigator.clipboard.writeText(link)
                    .then(() => {
                        const $btn = $('#shareModal').find('.btn-outline-secondary');
                        $btn.html('<i class="bi bi-check"></i>');
                        setTimeout(() => $btn.html('<i class="bi bi-clipboard"></i>'), 2000);
                    })
                    .catch(() => this.showError('Failed to copy link'));
            },

            // History management
            addToHistory: function(entry) {
                this.history.unshift(entry);
                if (this.history.length > 10) this.history.pop();
                this.saveHistory();
                this.updateHistoryDisplay();
            },

            // Save/load history
            saveHistory: function() {
                localStorage.setItem('imageGenHistory', JSON.stringify(this.history));
            },

            loadHistory: function() {
                try {
                    const saved = localStorage.getItem('imageGenHistory');
                    if (saved) {
                        this.history = JSON.parse(saved);
                        this.updateHistoryDisplay();
                    }
                } catch (error) {
                    console.error('Failed to load history:', error);
                }
            },

            // Update history display
            updateHistoryDisplay: function() {
                const $history = $('#generationHistory').empty();
                this.history.forEach(entry => {
                    const $item = $(`
                        <div class="history-item mb-2">
                            <img src="${entry.url}" class="img-thumbnail" style="width: 100px;">
                            <small class="d-block text-muted">${new Date(entry.timestamp).toLocaleString()}</small>
                        </div>
                    `).on('click', () => this.loadHistoryItem(entry));
                    $history.append($item);
                });
            },

            // Draft management
            autosaveDraft: function() {
                const draft = {
                    prompt: $('#imagePrompt').val(),
                    settings: {
                        size: $('#imageSize').val(),
                        style: $('#imageStyle').val(),
                        quality: $('#imageQuality').val(),
                        colorScheme: $('#colorScheme').val(),
                        background: $('#background').val(),
                        lighting: $('#lighting').val()
                    },
                    timestamp: new Date().toISOString()
                };

                this.saveDraft(draft);
            },

            // Save draft
            saveDraft: function(draft) {
                const draftIndex = this.drafts.findIndex(d =>
                    d.prompt === draft.prompt &&
                    JSON.stringify(d.settings) === JSON.stringify(draft.settings)
                );

                if (draftIndex === -1) {
                    this.drafts.unshift(draft);
                    if (this.drafts.length > 5) this.drafts.pop();
                } else {
                    this.drafts[draftIndex].timestamp = draft.timestamp;
                }

                this.saveDraftsToStorage();
                this.updateDraftsDisplay();
            },

            // Helper functions
            showError: function(message) {
                const $error = $('#errorAlert');
                $error.text(message).removeClass('d-none');
                setTimeout(() => $error.addClass('d-none'), 5000);
            },

            showProgress: function(show) {
                const $btn = $('#generateBtn');
                const $spinner = $btn.find('.spinner-border');
                const $text = $btn.find('.button-text');

                $btn.prop('disabled', show);
                if (show) {
                    $spinner.removeClass('d-none');
                    $text.text('Generating...');
                    this.updateProgressBar(0);
                } else {
                    $spinner.addClass('d-none');
                    $text.text('Generate Image');
                    this.updateProgressBar(100);
                }
            },

            updateProgressBar: function(progress) {
                $('#generationProgress').css('width', `${progress}%`);
            },

            clearForm: function() {
                $('#imagePrompt').val('');
                $('#imageSize').val('1024x1024');
                $('#imageStyle').val('vivid');
                $('#imageQuality').val('standard');
                $('#colorScheme').val('default');
                $('#background').val('auto');
                $('#lighting').val('auto');
                $('#resultContainer').addClass('d-none');
                $('#errorAlert').addClass('d-none');
                $('#previewContainer').addClass('d-none');
                $('#variationsContainer').addClass('d-none');
                this.currentImageUrl = '';
            }
        };

        // Initialize on document ready
        $(document).ready(function() {
            AdvantageAI.ImageGen.init();

            // Form submission handler
            $('#generateImageForm').on('submit', function(e) {
                e.preventDefault();
                const prompt = $('#imagePrompt').val().trim();

                if (!prompt) {
                    AdvantageAI.ImageGen.showError('Please enter an image description');
                    return;
                }

                AdvantageAI.ImageGen.generateImage($(this).serializeArray());
            });
        });
                                </script>
                            }
