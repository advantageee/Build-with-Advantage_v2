@model AdvantageAIWeb.ViewModels.AIModel

@{
    ViewBag.Title = "Generate Image Captions";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<main class="main-container">
    <div class="container mt-5">
        <form action="#" class="row g-3">
            <div class="col-12">
                <label class="form-label" for="files">Select Images</label>
                <input type="file" class="form-control" id="files" multiple />
                <div class="form-text">Upload one or more files</div>
            </div>

            <div class="col-12 mt-3">
                <label for="prompt" class="form-label">Optional Extra Prompt</label>
                <textarea id="prompt" class="form-control" rows="3"></textarea>
            </div>

            <div class="col-12 mt-3 d-flex align-items-center">
                <div id="progressContainer" class="d-none">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <span id="countComplete" class="ms-2">0</span>
                    <span class="ms-1">/</span>
                    <span id="countTotal" class="ms-1">0</span>
                </div>

                <button id="submit" type="button" class="btn btn-primary ms-auto">
                    Submit
                    <i class="bi bi-send ms-1"></i> <!-- Using Bootstrap Icons -->
                </button>
            </div>
        </form>
    </div>

    <div id="displayWindow" class="container mt-5"></div>
</main>

@section scripts {
    <script>
        const backendURL = `${window.location.protocol}//${window.location.hostname}:${window.location.port}/`;
        let captions = [];
        let prompt = "";

        const fileInput = document.getElementById("files");
        const promptInput = document.getElementById("prompt");
        const displayWindow = document.getElementById("displayWindow");
        const submitButton = document.getElementById("submit");
        const progressContainer = document.getElementById("progressContainer");
        const countComplete = document.getElementById("countComplete");
        const countTotal = document.getElementById("countTotal");

        const getCaption = async (image) => {
            const response = await fetch(backendURL + "Home/GenerateCaption", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({ prompt, image }),
            });
            const data = await response.json();
            if (data.error) {
                displayWindow.innerHTML = "Server Error";
                return false;
            }
            return data.output;
        };

        const handleCaptionGenerated = (captionObject) => {
            captions.push(captionObject);
            const captionDiv = document.createElement("div");
            captionDiv.className = "card mt-3";
            captionDiv.innerHTML = `
                    <div class="card-img-top">
                        <img src="${captionObject.image}" class="img-fluid" alt="Selected Image"/>
                    </div>
                    <div class="card-body">
                        <p class="card-text">${escape(captionObject.caption)}</p>
                    </div>
                `;
            displayWindow.appendChild(captionDiv);
        };

        const readFiles = (files) => {
            submitButton.disabled = true;
            countTotal.innerText = files.length;
            progressContainer.classList.remove("d-none");
            countComplete.innerText = 0;
            const reader = new FileReader();
            const readFile = (index) => {
                countComplete.innerText = index;
                if (index >= files.length) {
                    submitButton.disabled = false;
                    progressContainer.classList.add("d-none");
                    return;
                }

                let file = files[index];
                reader.onload = async (e) => {
                    const caption = await getCaption(e.target.result);
                    if (caption === false) return;
                    handleCaptionGenerated({
                        image: e.target.result,
                        caption: caption,
                    });
                    readFile(index + 1);
                };
                reader.readAsDataURL(file);
            };
            readFile(0);
        };

        document.getElementById("submit").addEventListener("click", () => {
            if (submitButton.disabled) return;
            if (fileInput.files.length == 0) return;
            displayWindow.innerHTML = "";
            prompt = promptInput.value || "Write a simple caption";
            captions = [];
            readFiles(fileInput.files);
        });

        function escape(htmlStr) {
            return htmlStr
                .replace(/&/g, "&amp;")
                .replace(/</g, "&lt;")
                .replace(/>/g, "&gt;")
                .replace(/"/g, "&quot;")
                .replace(/'/g, "&#39;");
        }
    </script>
}
