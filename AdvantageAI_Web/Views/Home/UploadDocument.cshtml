@model AdvantageAIWeb.ViewModels.UploadDocumentViewModel
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "Upload Document - AdvantageAI";
}

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h2 class="mb-0">Translate Document</h2>
                    <button type="button" class="btn btn-outline-secondary btn-sm" data-bs-toggle="modal" data-bs-target="#helpModal">
                        <i class="bi bi-question-circle"></i> Help
                    </button>
                </div>
                <div class="card-body">
                    @using (Html.BeginForm("UploadDocument", "Home", FormMethod.Post, new { enctype = "multipart/form-data", id = "uploadForm" }))
                    {
                        @Html.AntiForgeryToken()

                        <!-- File Upload -->
                        <div class="mb-3">
                            <label for="file" class="form-label">Select Document:</label>
                            <div class="input-group">
                                <input type="file" id="file" name="file" class="form-control"
                                       accept=".doc,.docx,.pdf,.txt,.rtf" required />
                                <button type="button" class="btn btn-outline-secondary" id="clearFileBtn">
                                    <i class="bi bi-x-lg"></i>
                                </button>
                            </div>
                            <div class="form-text">
                                Supported formats: PDF, DOC, DOCX, TXT, RTF (max 20MB)
                            </div>
                            <div id="selectedFileInfo" class="mt-2 d-none">
                                <small class="text-muted">
                                    <i class="bi bi-file-earmark-text"></i>
                                    <span id="fileName"></span>
                                    (<span id="fileSize"></span>)
                                </small>
                            </div>
                        </div>

                        <!-- Translation Options -->
                        <div class="row mb-3">
                            <!-- Target Language -->
                            <div class="col-md-6">
                                <label for="targetLanguage" class="form-label">Target Language:</label>
                                <select id="targetLanguage" name="targetLanguage" class="form-select" required>
                                    <option value="">Select language...</option>
                                    @if (Model.Languages != null)
                                    {
                                        foreach (var language in Model.Languages)
                                        {
                                            <option value="@language.Value">@language.Text</option>
                                        }
                                    }
                                </select>
                            </div>

                            <!-- Translation Quality -->
                            <div class="col-md-6">
                                <label for="translationQuality" class="form-label">Translation Quality:</label>
                                <select id="translationQuality" name="translationQuality" class="form-select">
                                    <option value="standard">Standard</option>
                                    <option value="professional">Professional</option>
                                    <option value="expert">Expert</option>
                                </select>
                            </div>
                        </div>

                        <!-- Advanced Options -->
                        <div class="mb-3">
                            <div class="form-check mb-2">
                                <input type="checkbox" id="preserveFormatting" name="preserveFormatting"
                                       class="form-check-input" checked />
                                <label class="form-check-label" for="preserveFormatting">
                                    Preserve original formatting
                                </label>
                            </div>
                            <div class="form-check mb-2">
                                <input type="checkbox" id="translateImages" name="translateImages"
                                       class="form-check-input" />
                                <label class="form-check-label" for="translateImages">
                                    Translate text in images
                                </label>
                            </div>
                            <div class="form-check">
                                <input type="checkbox" id="glossaryEnabled" name="glossaryEnabled"
                                       class="form-check-input" />
                                <label class="form-check-label" for="glossaryEnabled">
                                    Use custom glossary
                                </label>
                            </div>
                        </div>

                        <!-- Submit Button -->
                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary" id="uploadBtn">
                                <i class="bi bi-translate me-2"></i>
                                <span class="button-text">Translate Document</span>
                                <span class="spinner-border spinner-border-sm ms-2 d-none" role="status"></span>
                            </button>
                        </div>
                    }

                    <!-- Progress Section -->
                    <div id="progressSection" class="mt-4 d-none">
                        <h5>Translation Progress</h5>
                        <div class="progress mb-2">
                            <div id="uploadProgress" class="progress-bar progress-bar-striped progress-bar-animated"
                                 role="progressbar" style="width: 0%"></div>
                        </div>
                        <div class="d-flex justify-content-between">
                            <small class="text-muted" id="progressStatus">Preparing document...</small>
                            <small class="text-muted" id="progressPercentage">0%</small>
                        </div>
                    </div>

                    <!-- Result Section -->
                    <div id="resultSection" class="mt-4 d-none">
                        <div class="card bg-light">
                            <div class="card-body">
                                <h5 class="card-title">Translation Complete</h5>
                                <div class="mb-3">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <span id="translatedFileName"></span>
                                        <div class="btn-group">
                                            <button class="btn btn-sm btn-primary" id="downloadBtn">
                                                <i class="bi bi-download"></i> Download
                                            </button>
                                            <button class="btn btn-sm btn-outline-secondary" id="copyLinkBtn">
                                                <i class="bi bi-clipboard"></i> Copy Link
                                            </button>
                                        </div>
                                    </div>
                                </div>
                                <div class="text-muted">
                                    <small>
                                        <i class="bi bi-info-circle"></i>
                                        Translation quality: <span id="qualityScore"></span>
                                    </small>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Error Alert -->
                    <div id="errorAlert" class="alert alert-danger mt-3 d-none"></div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Help Modal -->
<div class="modal fade" id="helpModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Document Translation Help</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <h6>Supported File Types:</h6>
                <ul>
                    <li>PDF (.pdf)</li>
                    <li>Microsoft Word (.doc, .docx)</li>
                    <li>Text (.txt)</li>
                    <li>Rich Text (.rtf)</li>
                </ul>
                <h6>Translation Quality Levels:</h6>
                <ul>
                    <li><strong>Standard:</strong> Automated translation suitable for understanding content</li>
                    <li><strong>Professional:</strong> Enhanced accuracy with technical term support</li>
                    <li><strong>Expert:</strong> Highest quality with industry-specific terminology</li>
                </ul>
                <h6>Size Limits:</h6>
                <p>Maximum file size: 20MB</p>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        var AdvantageAI = AdvantageAI || {};

        AdvantageAI.Document = {
            translatedFileUrl: null,
            uploadXhr: null,

            // Initialize
            init: function() {
                this.setupEventListeners();
            },

            // Get CSRF token
            getCsrfToken: function() {
                return $('input[name="__RequestVerificationToken"]').val();
            },

            // Setup event listeners
            setupEventListeners: function() {
                $('#file').on('change', this.handleFileSelect.bind(this));
                $('#clearFileBtn').on('click', this.clearFile.bind(this));
                $('#uploadForm').on('submit', this.handleSubmit.bind(this));
                $('#downloadBtn').on('click', this.downloadFile.bind(this));
                $('#copyLinkBtn').on('click', this.copyLink.bind(this));
            },

            // Handle file selection
            handleFileSelect: function(e) {
                const file = e.target.files[0];
                if (!file) return;

                if (!this.validateFile(file)) {
                    this.showError('Please upload a supported document type under 20MB.');
                    this.clearFile();
                    return;
                }

                $('#fileName').text(file.name);
                $('#fileSize').text(this.formatFileSize(file.size));
                $('#selectedFileInfo').removeClass('d-none');
            },

            // Validate file
            validateFile: function(file) {
                const validTypes = [
                    'application/pdf',
                    'application/msword',
                    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
                    'text/plain',
                    'application/rtf'
                ];
                const maxSize = 20 * 1024 * 1024; // 20MB

                return validTypes.includes(file.type) && file.size <= maxSize;
            },

            // Format file size
            formatFileSize: function(bytes) {
                if (bytes === 0) return '0 Bytes';
                const k = 1024;
                const sizes = ['Bytes', 'KB', 'MB', 'GB'];
                const i = Math.floor(Math.log(bytes) / Math.log(k));
                return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
            },

            // Handle form submission
            handleSubmit: async function(e) {
                e.preventDefault();

                const file = $('#file')[0].files[0];
                const language = $('#targetLanguage').val();

                if (!file || !language) {
                    this.showError('Please select both a file and target language.');
                    return;
                }

                this.showLoading(true);
                this.showProgress(true);
                const formData = new FormData(e.target);

                try {
                    this.uploadXhr = $.ajax({
                        url: '@Url.Action("UploadDocument", "Home")',
                        type: 'POST',
                        data: formData,
                        processData: false,
                        contentType: false,
                        xhr: () => {
                            const xhr = new window.XMLHttpRequest();
                            xhr.upload.addEventListener('progress', this.updateProgress.bind(this), false);
                            return xhr;
                        },
                        success: (response) => {
                            if (response.success) {
                                this.handleSuccess(response);
                            } else {
                                this.showError(response.error || 'Translation failed.');
                            }
                        },
                        error: (xhr, status, error) => {
                            this.showError('An error occurred during translation.');
                            console.error('Upload error:', error);
                        },
                        complete: () => {
                            this.showLoading(false);
                            this.uploadXhr = null;
                        }
                    });
                } catch (error) {
                    this.showError('Failed to start translation.');
                    this.showLoading(false);
                    console.error('Submit error:', error);
                }
            },

            // Handle successful translation
            handleSuccess: function(response) {
                this.translatedFileUrl = response.translatedFileUrl;
                $('#translatedFileName').text(response.fileName);
                $('#qualityScore').text(response.qualityScore || 'N/A');
                $('#resultSection').removeClass('d-none');
                $('#progressSection').addClass('d-none');
                $('#errorAlert').addClass('d-none');
            },

            // Update progress bar
            updateProgress: function(e) {
                if (e.lengthComputable) {
                    const percent = Math.round((e.loaded * 100) / e.total);
                    $('#uploadProgress').css('width', percent + '%');
                    $('#progressPercentage').text(percent + '%');
                    $('#progressStatus').text(
                        percent < 100 ? 'Uploading document...' : 'Processing translation...'
                    );
                }
            },

            // Download translated file
            downloadFile: function() {
                if (!this.translatedFileUrl) return;

                const link = document.createElement('a');
                link.href = this.translatedFileUrl;
                link.download = '';
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            },

            // Copy link to clipboard
            copyLink: function() {
                if (!this.translatedFileUrl) return;

                navigator.clipboard.writeText(this.translatedFileUrl)
                    .then(() => {
                        const $btn = $('#copyLinkBtn');
                        const originalHtml = $btn.html();
                        $btn.html('<i class="bi bi-check"></i> Copied!');
                        setTimeout(() => $btn.html(originalHtml), 2000);
                    })
                    .catch(() => this.showError('Failed to copy link.'));
            },

            // Clear file input
            clearFile: function() {
                $('#file').val('');
                $('#selectedFileInfo').addClass('d-none');
                $('#fileName, #fileSize').text('');
            },

            // UI helpers
            showLoading: function(show) {
                const $btn = $('#uploadBtn');
                const $spinner = $btn.find('.spinner-border');
                const $text = $btn.find('.button-text');

                $btn.prop('disabled', show);
                $spinner.toggleClass('d-none', !show);
                $text.text(show ? 'Translating...' : 'Translate Document');
            },

            showProgress: function(show) {
                $('#progressSection').toggleClass('d-none', !show);
                if (show) {
                    $('#uploadProgress').css('width', '0%');
                    $('#progressPercentage').text('0%');
                    $('#progressStatus').text('Preparing document...');
                }
            },

            // Show error message
            showError: function(message) {
                $('#errorAlert').text(message).removeClass('d-none');
            }
        };

        $(document).ready(function() {
            AdvantageAI.Document.init();
        });
    </script>
}
